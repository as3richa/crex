#!/usr/bin/env ruby

require 'erb'
require 'yaml'

TYPES = {
  i8: 'char',
  i32: 'long',
  reg: 'reg_t',
  rm_mem: 'indirect_operand_t',
  rm_reg: 'reg_t',
  u8: 'unsigned char',
  u32: 'size_t',
  u64: 'uint64_t',
}.freeze

if ARGV.size != 2
  $stderr.puts("usage: #{$0} <output file> <dependency file>")
  exit(1)
end

file = File.open(ARGV[0], 'w')

template = ERB.new(File.read(File.join(__dir__, 'instruction.erb.c')))

instructions = YAML.load_file(File.join(__dir__, 'instructions.yml'))

# symbolize_keys isn't standard :(
instructions = instructions.map do |hsh|
  hsh.map { |key, value| [key.to_sym, value] }.to_h
end

preamble = <<-EOF
// Silence warnings in development for unused assembler functions
#if (defined(__GNUC__) || defined(__clang__)) && !defined(NDEBUG)
#define MAYBE_UNUSED __attribute__((unused))
#else
#define MAYBE_UNUSED
#endif

EOF

file.puts(preamble)

first = true

instructions.each do |name:, opcode:, encoding:, rex_w: false, extension: nil, special: nil|
  function_name = ([name] + encoding.map { |enc| enc.gsub('rm_', '') }).join('_')

  param_list = if encoding.empty?
    nil
  else
    types = encoding.map { |enc| TYPES.fetch(enc.to_sym) }

    names = encoding.map do |enc|
      case enc
      when 'i8', 'i32', 'u8', 'u32', 'u64'
        'immediate'
      else
        enc
      end
    end

    ', ' + types.zip(names).map { |type, name| "#{type} #{name}"}.join(', ')
  end

  opcode_literal = '{' + opcode.map { |byte| "0x#{byte.to_s(16)}" }.join(', ') + '}'

  reg = false
  rm_mem = false
  rm_reg = false
  immediate = false

  immediate_size = nil
  immediate_unsigned = nil

  encoding.each do |enc|
    case enc
    when 'reg'
      reg = true
    when 'rm_mem'
      rm_mem = true
    when 'rm_reg'
      rm_reg = true
    when 'i8'
      immediate = true
      immediate_size = 1
      immediate_unsigned = false
    when 'i32'
      immediate = true
      immediate_size = 4
      immediate_unsigned = false
    when 'u8'
      immediate = true
      immediate_size = 1
      immediate_unsigned = true
    when 'u32'
      immediate = true
      immediate_size = 4
      immediate_unsigned = true
    when 'u64'
      immediate = true
      immediate_size = 8
      immediate_unsigned = true
    else
      raise "bad operand encoding: #{enc}"
    end
  end

  reg_or_extension = (reg && 'reg') || (extension && "0x#{extension.to_s(16)}") || 0

  if special
    max_size = opcode.size
  else
    # Possible REX byte, opcode
    max_size = 1 + opcode.size

    # ModRM byte if requried
    max_size += 1 if reg || rm_mem || rm_reg || extension

    # Possible SIB and displacement
    max_size += 5 if rm_mem

    # Immediate
    max_size += immediate_size if immediate
  end

  code = template.result(binding)
  while code.gsub!("\n\n\n", "\n\n"); end
  file.puts("\n") unless first
  file.puts(code)

  first = false
end

dirname = File.dirname(__FILE__)
deps = [__FILE__, File.join(dirname, 'instructions.yml'), File.join(dirname, 'instruction.erb.c')]
File.write(ARGV[1], "#{ARGV[0]}: #{deps.join(' ')}\n")
